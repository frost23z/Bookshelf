import com.frost23z.bookshelf.domain.model.PublicationFrequency;
import kotlinx.datetime.LocalDate;

CREATE TABLE series (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT,
    latestOwnedVolume INTEGER DEFAULT NULL,
    totalVolumes INTEGER,
    publicationFrequency TEXT AS PublicationFrequency,
    firstPublicationDate TEXT AS LocalDate,
    FOREIGN KEY (latestOwnedVolume) REFERENCES books(id) ON DELETE SET NULL
);

CREATE TRIGGER IF NOT EXISTS update_latest_owned_volume_insert
AFTER INSERT ON books
FOR EACH ROW
WHEN new.seriesId IS NOT NULL
BEGIN
    UPDATE series
    SET latestOwnedVolume = (
        SELECT id FROM books
        WHERE seriesId = new.seriesId
        ORDER BY volume DESC, id DESC
        LIMIT 1
    )
    WHERE id = new.seriesId;
END;

CREATE TRIGGER IF NOT EXISTS update_latest_owned_volume_delete
AFTER DELETE ON books
FOR EACH ROW
WHEN old.seriesId IS NOT NULL
BEGIN
    UPDATE series
    SET latestOwnedVolume = COALESCE(
        (SELECT id FROM books
         WHERE seriesId = old.seriesId
         ORDER BY volume DESC, id DESC
         LIMIT 1),
        NULL
    )
    WHERE id = old.seriesId;
END;

CREATE TRIGGER IF NOT EXISTS update_latest_owned_volume_update
AFTER UPDATE OF seriesId, volume ON books
FOR EACH ROW
BEGIN
    -- Update new series if there is one
    UPDATE series
    SET latestOwnedVolume = COALESCE(
        (SELECT id FROM books
         WHERE seriesId = new.seriesId
         ORDER BY volume DESC, id DESC
         LIMIT 1),
        NULL
    )
    WHERE id = new.seriesId AND new.seriesId IS NOT NULL;
    
    -- Update old series if there was one and it's different
    UPDATE series
    SET latestOwnedVolume = COALESCE(
        (SELECT id FROM books
         WHERE seriesId = old.seriesId
         ORDER BY volume DESC, id DESC
         LIMIT 1),
        NULL
    )
    WHERE id = old.seriesId 
    AND old.seriesId IS NOT NULL 
    AND old.seriesId IS NOT new.seriesId;
END;

getSeriesById:
SELECT *
FROM series
WHERE id = :id;

getAllSeries:
SELECT *
FROM series;

getLastInsertedSeriesId:
SELECT last_insert_rowid();

insertSeries:
INSERT INTO series(
    title, description, totalVolumes, publicationFrequency, firstPublicationDate
)
VALUES (
    :title, :description, :totalVolumes, :publicationFrequency, :firstPublicationDate
);

updateSeries:
UPDATE series SET
    title = :title,
    description = :description,
    totalVolumes = :totalVolumes,
    publicationFrequency = :publicationFrequency,
    firstPublicationDate = :firstPublicationDate
WHERE id = :id;

deleteSeries:
DELETE FROM series
WHERE id = :id;